[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

# The URL we will connect to
export var websocket_url = \"ws://echo.websocket.org\"
var datat = JSON.parse('{\"bruh\":\"bruh\"}')
# Our WebSocketClient instance
var _client = WebSocketClient.new()

var is_connected = false
var dataisvaled = false

func _ready():
	# Connect base signals to get notified of connection open, close, and errors.
	_client.connect(\"connection_closed\", self, \"_closed\")
	_client.connect(\"connection_error\", self, \"_closed\")
	_client.connect(\"connection_established\", self, \"_connected\")
	# This signal is emitted when not using the Multiplayer API every time
	# a full packet is received.
	# Alternatively, you could check get_peer(1).get_available_packets() in a loop.
	_client.connect(\"data_received\", self, \"_on_data\")

	# Initiate connection to the given URL.


func _closed(was_clean = false):
	# was_clean will tell you if the disconnection was correctly notified
	# by the remote peer before closing the socket.
	print(\"Closed, clean: \", was_clean)
	set_process(false)
	is_connected = false
	
	$Connction/Connect.disabled = false
	$Connction/IP.editable = true
	$Connction/Connect.text = \"Connect\"
	
	$\"Diq/Start BPM\".disabled = true
	$\"Diq/Start ECG\".disabled = true
#	_client.queue_free()
#	_client = WebSocketClient.new()

func _connected(proto = \"\"):
	# This is called on connection, \"proto\" will be the selected WebSocket
	# sub-protocol (which is optional)
	print(\"Connected with protocol: \", proto)
	# You MUST always use get_peer(1).put_packet to send data to server,
	# and not put_packet directly when not using the MultiplayerAPI.
	_client.get_peer(1).put_packet(\"Test packet\".to_utf8())
	set_process(true)
	is_connected = true
	
	$Connction/Connect.disabled = false
	$Connction/IP.editable = false
	$Connction/Connect.text = \"Disconnect\"
	
	$\"Diq/Start BPM\".disabled = false
	$\"Diq/Start ECG\".disabled = false

func _on_data():
	var inputdata = _client.get_peer(1).get_packet().get_string_from_ascii()
	#print(inputdata)
	datat = JSON.parse(inputdata)
	
	print(datat.result)
	if datat.result != null:
		if datat.result.has(\"bpm_data\"):
			dataisvaled = true
			#print(datat.result)
		else:
			dataisvaled = false
	else:
		dataisvaled = false
	
	
	if dataisvaled:
		$\"Diq/Start BPM\".text = \"Stop BPM scan\" if datat.result.bpm_data.is_busy else \"Start BPM scan\"
		$\"Diq/Start ECG\".text = \"Stop ECG scan\" if datat.result.ecg_data.is_busy else \"Start ECG scan\"
	
	
	

# warning-ignore:unused_argument
func _process(delta):
	# Call this in _process or _physics_process. Data transfer, and signals
	# emission will only happen when calling this function.
	_client.poll()
	
	
	if dataisvaled:
		$Diq/BPM_status.text = datat.result.bpm_data.get(\"bpm_lastbeattime\", \"N/A\")
	#$Diq/ECG.text = datat.ecg_data

func _on_Connection_button__pressed():
	if is_connected == false:
		$Connction/Connect.disabled = true
		$Connction/IP.editable = false
		$Connction/Connect.text = \"Connecting...\"
		websocket_url = $Connction/IP.text
		print(websocket_url)
		var err = _client.connect_to_url(websocket_url)
		if err != OK:
			print(\"Unable to connect\")
			set_process(false)
	else: 
		$Connction/Connect.disabled = true
		$Connction/IP.editable = false
		$Connction/Connect.text = \"Disconnecting...\"
		_client.disconnect_from_host()
	


func _on_Start_BPM_pressed():
	if dataisvaled:
		print(\"toggling BPM\")
		if datat.result.bpm_data.is_busy:
			_client.get_peer(1).put_packet(\"stopbpm\".to_ascii())
		else:
			_client.get_peer(1).put_packet(\"startbpm\".to_ascii())
	pass


func _on_Start_ECG_pressed():
	pass # Replace with function body.


func _on_IP_gui_input(event):
	if event.is_action_pressed(\"ui_accept\"):
		_on_Connection_button__pressed()
	pass # Replace with function body.
"

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Diq" type="Panel" parent="."]
anchor_right = 1.0
margin_top = 100.0
margin_bottom = 200.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="BPM" type="Label" parent="Diq"]
margin_top = -0.172928
margin_right = 29.0
margin_bottom = 13.8271
text = "BPM"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="BPM_status" type="Label" parent="Diq"]
anchor_right = 1.0
margin_left = 35.0
margin_right = 1.0
margin_bottom = 6.0
text = "123"
align = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Start BPM" type="Button" parent="Diq"]
anchor_right = 1.0
margin_top = 22.0
margin_right = 1.0
margin_bottom = 28.7168
disabled = true
text = "Start BPM"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ECG" type="Label" parent="Diq"]
margin_top = 62.0
text = "ECG"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ECG_status" type="Label" parent="Diq"]
anchor_right = 1.0
margin_left = 31.0
margin_top = 62.0
margin_right = 1.0
margin_bottom = 36.0
text = "231"
align = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Start ECG" type="Button" parent="Diq"]
anchor_right = 1.0
margin_top = 82.0
margin_right = 1.0
margin_bottom = 62.3415
disabled = true
text = "Start ECG"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Connction" type="Panel" parent="."]
anchor_right = 1.0
margin_left = -0.156647
margin_right = -0.156616
margin_bottom = 100.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Connect" type="Button" parent="Connction"]
anchor_right = 1.0
margin_top = 32.0
margin_bottom = 24.0
text = "Connect "
__meta__ = {
"_edit_use_anchors_": false
}

[node name="IP" type="LineEdit" parent="Connction"]
anchor_right = 1.0
margin_left = 100.0
text = "192.168.1.1"
align = 2
max_length = 21
placeholder_text = "192.168.1.1"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Enter IP" type="Label" parent="Connction"]
margin_right = 77.0
margin_bottom = 14.0
text = "Enter you IP"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="BPM Time reamaining" type="Label" parent="."]
margin_right = 40.0
margin_bottom = 14.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ECG Time reamaining" type="Label" parent="."]
margin_right = 40.0
margin_bottom = 14.0
__meta__ = {
"_edit_use_anchors_": false
}
[connection signal="pressed" from="Diq/Start BPM" to="." method="_on_Start_BPM_pressed"]
[connection signal="pressed" from="Diq/Start ECG" to="." method="_on_Start_ECG_pressed"]
[connection signal="pressed" from="Connction/Connect" to="." method="_on_Connection_button__pressed"]
[connection signal="gui_input" from="Connction/IP" to="." method="_on_IP_gui_input"]
